dev.off()
p_lol <- ggdotchart(occ_pfr, x = "scenario", y = "area",
color = "#00AFBB",
dot.size = 6,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
ggtheme = theme_pubr()                        # ggplot2 theme
)
png("figure_4_test.png", width=10,height=6,unit='in',res=300)
print(p_lol)
dev.off()
png("figure_4_test.png", width=6,height=6,unit='in',res=300)
print(p_lol)
dev.off()
p_lol <- ggdotchart(occ_pfr, x = "scenario", y = "area",
color = "#00AFBB",
dot.size = 6,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
png("figure_4_test.png", width=6,height=6,unit='in',res=300)
print(p_lol)
dev.off()
p_lol <- ggdotchart(occ_pfr, x = "scenario", y = "area",
color = "#00AFBB",
dot.size = 15,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
png("figure_4_test.png", width=6,height=6,unit='in',res=300)
print(p_lol)
dev.off()
p_lol <- ggdotchart(occ_pfr, x = "scenario", y = "area",
color = "#00AFBB",
dot.size = 15,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
png("figure_4_test.png", width=6,height=4,unit='in',res=300)
print(p_lol)
dev.off()
View(occ_pfr)
p_lol <- ggdotchart(occ_pfr, x = "scenario", y = "area",
color = "type"
color = "#00AFBB",
dot.size = 15,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
png("figure_4_test.png", width=6,height=4,unit='in',res=300)
print(p_lol)
dev.off()
p_lol <- ggdotchart(occ_pfr, x = "scenario", y = "area",
color = "type",
palette = c("#00AFBB", "#E7B800"), # Custom color palette                    dot.size = 15,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
png("figure_4_test.png", width=6,height=4,unit='in',res=300)
print(p_lol)
dev.off()
p_lol <- ggdotchart(occ_pfr, x = "scenario", y = "area",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette,
dot.size = 15,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
png("figure_4_test.png", width=6,height=4,unit='in',res=300)
print(p_lol)
dev.off()
occ_test <- occ_pfr
occ_test <- occ_test[-c(3,5),]
View(occ_test)
occ_test$scenario[1] <- occ_test$type[1]
occ_test <- occ_pfr
occ_test <- occ_test[-c(3,5),]
occ_test$type <- as.character(occ_test$type)
occ_test$scenario <- as.character(occ_test$scenario)
occ_test$scenario[1] <- occ_test$type[1]
p_lol <- ggdotchart(occ_pfr, x = "scenario", y = "area",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette,
dot.size = 15,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
png("figure_4_test.png", width=6,height=4,unit='in',res=300)
print(p_lol)
dev.off()
p_lol <- ggdotchart(occ_pfr, x = "scenario", y = "area",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette,
dot.size = 15,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
p_lol <- ggdotchart(occ_test, x = "scenario", y = "area",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette,
dot.size = 15,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
png("figure_4_test.png", width=6,height=4,unit='in',res=300)
print(p_lol)
dev.off()
p_lol <- ggdotchart(occ_test, x = "scenario", y = "area",
color = "type",
palette = c("#00AFBB", "#E7B800"), # Custom color palette,
dot.size = 15,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
occ_test$type <- as.factor(occ_test$type)
occ_test$scenario <- as.factor(occ_test$scenario)
p_lol <- ggdotchart(occ_test, x = "scenario", y = "area",
color = "type",
palette = c("#00AFBB", "#E7B800"), # Custom color palette,
dot.size = 15,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
p_lol <- ggdotchart(occ_test, x = "scenario", y = "area",
color = "type",
#palette = c("#00AFBB", "#E7B800"), # Custom color palette,
dot.size = 15,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
p_lol <- ggdotchart(occ_test, x = "scenario", y = "area",
#color = "type",
palette = c("#00AFBB", "#E7B800"), # Custom color palette,
dot.size = 15,                                 # Large dot size
sorting = "descending",                        # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
add = "segments",                             # Add segments from y = 0 to dots
label = round(occ_pfr$area),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
p_lol <- ggdotchart(occ_test, x = "scenario", y = "area",
color = "type",
palette = c("#00AFBB", "#E7B800"), # Custom color palette,
dot.size = 15, # Large dot size
sorting = "descending", # Sort value in descending order
rotate = TRUE, # Rotate vertically
#add = "segments", # Add segments from y = 0 to dots
label = round(occ_pfr$area), # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
p_lol <- ggdotchart(occ_test, x = "scenario", y = "area",
color = "type",
palette = c("#00AFBB", "#E7B800"), # Custom color palette,
dot.size = 15, # Large dot size
sorting = "descending", # Sort value in descending order
rotate = TRUE, # Rotate vertically
add = "segments", # Add segments from y = 0 to dots
label = round(occ_test$area), # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5), # Adjust label parameters
ggtheme = theme_pubr() # ggplot2 theme
)
png("figure_4_test.png", width=6,height=4,unit='in',res=300)
print(p_lol)
dev.off()
occ_test$scenario[occ_test$scenario=="current"] = "Current",
"pfr_60" = "60% productivity",
"pfr_80" = "80% productivity")
occ_test <- occ_pfr
occ_test <- occ_test[-c(3,5),]
occ_test$type <- as.character(occ_test$type)
occ_test$scenario <- as.character(occ_test$scenario)
occ_test$scenario[1] <- occ_test$type[1]
occ_test$type <- as.factor(occ_test$type)
occ_test$scenario <- as.factor(occ_test$scenario)
occ_test$scenario[occ_test$scenario=="current"] = "Current"
occ_test <- occ_pfr
occ_test <- occ_test[-c(3,5),]
occ_test$type <- as.character(occ_test$type)
occ_test$scenario <- as.character(occ_test$scenario)
occ_test$scenario[1] <- occ_test$type[1]
occ_test$scenario[occ_test$scenario=="current"] = "Current"
occ_test$scenario[occ_test$scenario=="pfr_60"] = "60% productivity"
occ_test$scenario[occ_test$scenario=="pfr_80"] = "80% productivity"
occ_test$type <- as.factor(occ_test$type)
occ_test$scenario <- as.factor(occ_test$scenario)
occ_test <- occ_pfr
occ_test <- occ_test[-c(3,5),]
occ_test$type <- as.character(occ_test$type)
occ_test$scenario <- as.character(occ_test$scenario)
occ_test$scenario[1] <- occ_test$type[1]
occ_test$scenario[occ_test$scenario=="current"] = "Current"
occ_test$scenario[occ_test$scenario=="pfr_60"] = "60% productivity"
occ_test$scenario[occ_test$scenario=="pfr_80"] = "80% productivity"
occ_test$scenario[occ_test$scenario=="tpa"] = "Totally protected area"
occ_test$type <- as.factor(occ_test$type)
occ_test$scenario <- as.factor(occ_test$scenario)
p_lol <- ggdotchart(occ_test, x = "scenario", y = "area",
color = "type",
palette = c("#00AFBB", "#E7B800"), # Custom color palette,
dot.size = 15, # Large dot size
sorting = "descending", # Sort value in descending order
rotate = TRUE, # Rotate vertically
add = "segments", # Add segments from y = 0 to dots
label = round(occ_test$area), # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5), # Adjust label parameters
ggtheme = theme_pubr() # ggplot2 theme
)
png("figure_4_test.png", width=6,height=4,unit='in',res=300)
print(p_lol)
dev.off()
png("figure_4_test.png", width=7,height=4,unit='in',res=300)
print(p_lol)
dev.off()
png("figure_4_test.png", width=8,height=4,unit='in',res=300)
print(p_lol)
dev.off()
library(raster)
library(rgdal)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(rgeos)
library(maps)
library(viridis)
# Figure 3: current range
# read in raster of current sun bear range
sb_current <- raster("~/Dropbox (ScreenForBio)/GIS & Remote sensing/Sabah_2016-2019_Working_Folder/SB_shapefiles/predictions/sun_bear_current_range.tif")
# convert to data frame for plotting with ggplot2
sb_current_df <- as(sb_current,"SpatialPixelsDataFrame")
sb_current_df <- as.data.frame(sb_current_df)
colnames(sb_current_df) <- c("occupancy","x","y")
# bring in Sabah mainland outline
sabah <- readOGR("~/Dropbox (ScreenForBio)/GIS & Remote sensing/Sabah_2016-2019_Working_Folder/General/Sabah_mainland.shp")
# creating data frame from spatial polygon data frame
sabah_df <- fortify(sabah)
# plot
p2 <- ggplot() +
geom_tile(data = sb_current_df, aes(x=x, y=y, fill = occupancy)) +
scale_fill_viridis(
option = "magma", #here you can change the color scheme
direction = -1,
name = "Occupancy probability",
guide = guide_colorbar(
direction = "horizontal",
barheight = unit(2, units = "mm"),
barwidth = unit(50, units = "mm"),
draw.ulim = F,
title.position = 'top',
# some shifting around
title.hjust = 0.5,
label.hjust = 0.5
)) +
geom_map(data = sabah_df, map = sabah_df, aes(long,lat,map_id = id),
color = "black", fill = "transparent") +
coord_equal() + # how to add coordinate frame for publication?
#coord_map() + # for some reason coord_map is causing problems. so I am using coord_equal instead
scale_x_continuous(breaks = c(300000, 400000, 500000, 600000, 700000),
labels = c("300000", "400000", "500000","600000","700000"),
sec.axis = dup_axis()) +
scale_y_continuous(breaks = c(500000, 600000, 700000),
labels = c("500000","600000","700000"),
sec.axis = dup_axis()) +
theme_bw() +
labs(fill = "Occupancy") +
xlab("UTM Easting") +
ylab("UTM Northing") +
theme(legend.position = "bottom",
panel.border = element_rect(colour = "black", fill=NA, size=3))
png("figure_3.png", width=6,height=6,unit='in',res=300)
print(p2)
dev.off()
numbers = c(1,1,1,1,2,2,2,3,3,3)
letters = rep(NA, length(numbers))
df = data.frame(numbers, letters)
A = c(1, 2, 3)
B = c("A", "B", "C")
ref = data.frame(A,B)
colnames(ref) = c("numbers", "letters")
View(ref)
View(df)
size <- dim(ref)
size <- dim(ref)[1]
sizw
size
1:size
val i<-1
i<-1
df$letters[ref$numbers[i]]
df$letters[ref$numbers[i]] <- ref$letters[i]
ref$letters[i]
df$letters[df$letters==ref$numbers[i]] <- as.character(ref$letters[i])
ref$numbers[i]
df$letters[df$numbers==ref$numbers[i]] <- as.character(ref$letters[i])
numbers = c(1,1,1,1,2,2,2,3,3,3)
letters = rep(NA, length(numbers))
df = data.frame(numbers, letters)
A = c(1, 2, 3)
B = c("A", "B", "C")
ref = data.frame(A,B)
colnames(ref) = c("numbers", "letters")
size <- dim(ref)[1]
for (i in 1:size) {
df$letters[df$numbers==ref$numbers[i]] <- as.character(ref$letters[i])
}
15+1000+35+50+50
429+7000+67+400+1000
9000+2-3+460+1014
9000+203+460+1014
library(sf)
library(raster)
library(SDraw)
library(mapview)
library(sp)
library(rgeos)
library(rgdal)
library(foreach)
year <- "2015"
Sys.setenv(TZ='Asia/Ho_Chi_Minh')
Sys.timezone() ## Check. should now say 'Asia/Ho_Chi_Minh'
time.zone = "Asia/Ho_Chi_Minh" ##in case this is ever in question!
# read in paths
setwd("~/Dropbox (ScreenForBio)/WWF Vietnam SMART data/Vietnam/Tracklog 2011 - 2019/SMART")
source("~/Dropbox (ScreenForBio)/WWF Vietnam SMART data/Modified_SMART_data_processing/functions/Initial_tracklog_processing.R")
#Identify folder where tracklogs are stored.
wd.gps <- paste("~/Dropbox (ScreenForBio)/WWF Vietnam SMART data/Vietnam/Tracklog 2011 - 2019/SMART/",year,"/GPX",sep="")
###########################################
# extract  spatial point data frames, one for each file, and store as a list
AllTracks <- ReadgpxTracks (wd.in = wd.gps, include.subdirs = TRUE)
AllTracks <- ReadmifTracks (wd.in = wd.gps, include.subdirs = TRUE)
##LIST AND REMOVE FROM AllTracks FILES WHICH COULDN'T BE READ.
unreadable <- names(which(sapply(AllTracks,is.null)))
AllTracks <- AllTracks[which(!names(AllTracks) %in% unreadable)]
empty <- names(which(sapply(AllTracks,function(x){nrow(x@data)==0})))
# there are no empty ones (which aren't unreadable) so next line does nothing
AllTracks <- AllTracks[which(!names(AllTracks) %in% empty)]
#grid <- readOGR("~/Dropbox (ScreenForBio)/Wilkinson_RESHARE/empty_grids","grid_500_m_saola_PAs")
grid <- readOGR("~/Dropbox (ScreenForBio)/WWF Vietnam SMART data/lucille_working_folder","grid")
grid<-spTransform(grid, CRS("+proj=utm +zone=48 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
#study_area <- st_read("~/Dropbox (ScreenForBio)/WWF Vietnam SMART data/GIS_data/HQNSLPAsnew.shp")
SA <- shapefile("~/Dropbox (ScreenForBio)/WWF Vietnam SMART data/GIS_data/HQNSLPAsnew.shp")
SA<-spTransform(SA, CRS("+proj=utm +zone=48 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
grid2 <- crop(grid,SA)
grid <- grid2
roads <- readOGR("~/Dropbox (ScreenForBio)/Wilkinson_RESHARE/My_GIS_data","roadsREVISED")
roads<-spTransform(roads, CRS("+proj=utm +zone=48 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
b_roads <- gBuffer(roads, width=20)
png('study_area_grid.png', width = 15, height = 10, units = 'in', res = 300)
plot(grid2,border="grey")
plot(SA,add=TRUE)
plot(b_roads,add=TRUE,col="red",border="red")
dev.off()
setwd(paste("~/Dropbox (ScreenForBio)/WWF Vietnam SMART data/Vietnam/Tracklog 2011 - 2019/SMART/",year,"/effort",sep=""))
library(doParallel)
registerDoParallel(cores=4)
#for (k in (length(AllTracks)/2):(length(AllTracks))) {
foreach(k=1:length(AllTracks)) %dopar% {
library(sf)
library(raster)
library(SDraw)
library(mapview)
library(sp)
library(rgeos)
library(rgdal)
library(foreach)
track_name <- names(AllTracks[k])
track_name <- substr(track_name,1,nchar(track_name)-4)
track_name <- gsub("/", "_", track_name)
track_name <- gsub("\\.", "_", track_name)
track_name <- gsub(" ", "_", track_name)
track_point <- AllTracks[[k]]
track_point <- spTransform(track_point, CRS("+proj=utm +zone=48 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
track_points <- crop(track_point,grid)
track_points$date <- track_points$time
#gI <- area(gIntersection(b_track_lines,b_roads, byid=c(TRUE, TRUE)))
if (!is.null(track_points)) {
track_points$date <- format(as.POSIXct(track_points$date,format='%Y/%m/%d %H:%M:%S'),format='%Y/%m/%d')
track_points$date <- as.character(track_points$date)
un.date <- unique(track_points$date)
effort <- grid
effort@data$area <- 0
effort@data$percent_covered <- 0
effort_table <- array(NA,c(length(grid@polygons),length(un.date)))
for (i in 1:length(un.date)) {
#subset to one day
tmp <- subset(track_points, (date == un.date[i]))
#order points by time
tmp2 <- tmp[order(tmp$time),]
#turn points into line
#test2 <- points_to_line(tmp2)
#points_to_line is not working...not sure why
un.coords <- unique(tmp2@coords)
if (dim(un.coords)[1] >1) {
track_lines <- coords2Lines(tmp2@coords, ID=un.date[i])
proj4string(track_lines) <- "+proj=utm +zone=48 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
b_track_lines <- gBuffer(track_lines, width=20)
#assign projection
#proj4string(track_lines) <- "+proj=utm +zone=48 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
gI <- gIntersection(grid,b_track_lines, byid=c(TRUE, TRUE))
for (j in 1:length(grid@polygons)) {
print(j)
#take first grid cell
tmp4 <- grid[j,]
#make new extent for lines for the day in question
ext.tmp <- extent(min(tmp@coords[,1]),
max(tmp@coords[,1]),
min(tmp@coords[,2]),
max(tmp@coords[,2]))
#check if there was any activity in the current grid cell
#inter <- intersect(ext.tmp, extent(tmp4))
inter <- gIntersects(tmp4,gI, byid=TRUE)
#if there was effort figure out the distance covered
if (any(inter==TRUE)) {
print(j)
print("TRUE!")
#crop the line to the cell of interest
cell_poly <- crop(gI, extent(tmp4))
#calculate the length of the line or "distance covered"
cell_road <- crop(b_roads,extent(tmp4))
tmp_area <- area(cell_poly) #lineLength(cell_poly) # THIS WORKS FINE IF I CAN GET THE SHAPEFILE CROPPED PROPERLY
#assign this to the effort shapefile
cell_size <- area(tmp4)
if (!is.null(cell_road)) {
effort@data$area[j] <- tmp_area - area(gIntersection(gI,cell_road))
effort@data$percent_covered[j] <- effort@data$area[j]/cell_size
} else {
effort@data$area[j] <- tmp_area
effort@data$percent_covered[j] <- effort@data$area[j]/cell_size
}
#if not set effort to 0
} else {
effort@data$area[j] <- 0
effort@data$percent_covered[j] <- 0
}
effort_table[j,i] <- effort@data$percent_covered[j]
}
}
}
effort_table <- as.data.frame(effort_table)
colnames(effort_table) <- un.date
rownames(effort_table) <- seq(1,length(grid@polygons))
write.csv(effort_table,paste("effort_table_polygons_",track_name,".csv",sep=""))
} else {
write.csv(track_name,paste("~/Dropbox (ScreenForBio)/WWF Vietnam SMART data/Vietnam/Tracklog 2011 - 2019/SMART/",year,"/error/error_",track_name,".csv",sep=""))
}
}
